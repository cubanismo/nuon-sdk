; condition codes
(define cc-z	    #x00000001)
(define cc-c	    #x00000002)
(define cc-v	    #x00000004)
(define cc-n	    #x00000008)
(define cc-mv	    #x00000010)
(define cc-c0z	    #x00000020)
(define cc-c1z	    #x00000040)
(define cc-modge    #x00000080)
(define cc-modmi    #x00000100)
(define cc-cf0	    #x00000200)
(define cc-cf1	    #x00000400)

(define-class c-register
  (instance-variables
    i-processor
    i-name
    i-address))

(define-method (c-register 'initialize processor name)
  (let ((addr (processor 'register-address name)))
    (if addr
      (begin
        (set! i-processor processor)
        (set! i-name name)
        (set! i-address addr)
        self)
      #f)))

(define-method (c-register 'print &optional (s *standard-output*))
  (format s "#<~A>" i-name)
  (values))

(define-method (c-register 'name)
  i-name)

(define-method (c-register 'address)
  i-address)

(define-method (c-register 'value)
  (i-processor 'fetch-scalar i-address))

(define-method (c-register 'set-value! value)
  (i-processor 'store-scalar! i-address value))
      
(define-method (c-mpe 'make-register-environment)
  (let ((r0             (self 'find-register-by-name "r0"))
        (r1             (self 'find-register-by-name "r1"))
        (r2             (self 'find-register-by-name "r2"))
        (r3             (self 'find-register-by-name "r3"))
        (r4             (self 'find-register-by-name "r4"))
        (r5             (self 'find-register-by-name "r5"))
        (r6             (self 'find-register-by-name "r6"))
        (r7             (self 'find-register-by-name "r7"))
        (r8             (self 'find-register-by-name "r8"))
        (r9             (self 'find-register-by-name "r9"))
        (r10            (self 'find-register-by-name "r10"))
        (r11            (self 'find-register-by-name "r11"))
        (r12            (self 'find-register-by-name "r12"))
        (r13            (self 'find-register-by-name "r13"))
        (r14            (self 'find-register-by-name "r14"))
        (r15            (self 'find-register-by-name "r15"))
        (r16            (self 'find-register-by-name "r16"))
        (r17            (self 'find-register-by-name "r17"))
        (r18            (self 'find-register-by-name "r18"))
        (r19            (self 'find-register-by-name "r19"))
        (r20            (self 'find-register-by-name "r20"))
        (r21            (self 'find-register-by-name "r21"))
        (r22            (self 'find-register-by-name "r22"))
        (r23            (self 'find-register-by-name "r23"))
        (r24            (self 'find-register-by-name "r24"))
        (r25            (self 'find-register-by-name "r25"))
        (r26            (self 'find-register-by-name "r26"))
        (r27            (self 'find-register-by-name "r27"))
        (r28            (self 'find-register-by-name "r28"))
        (r29            (self 'find-register-by-name "r29"))
        (r30            (self 'find-register-by-name "r30"))
        (r31            (self 'find-register-by-name "r31"))
        (mpectl         (self 'find-register-by-name "mpectl"))
        (rz             (self 'find-register-by-name "rz")) 
        (cc             (self 'find-register-by-name "cc"))
        (rc0            (self 'find-register-by-name "rc0"))
        (rc1            (self 'find-register-by-name "rc1"))
        (sp             (self 'find-register-by-name "sp"))
        (excepsrc       (self 'find-register-by-name "excepsrc")) 
        (excepclr       (self 'find-register-by-name "excepclr"))
        (excephalten    (self 'find-register-by-name "excephalten"))
        (pcfetch        (self 'find-register-by-name "pcfetch"))
        (pcroute        (self 'find-register-by-name "pcroute"))
        (pcexec         (self 'find-register-by-name "pcexec"))
        (rzi1           (self 'find-register-by-name "rzi1"))
        (intvec1        (self 'find-register-by-name "intvec1"))
        (inten1         (self 'find-register-by-name "inten1"))
        (inten1set      (self 'find-register-by-name "inten1set"))
        (inten1clr      (self 'find-register-by-name "inten1clr"))
        (rzi2           (self 'find-register-by-name "rzi2"))
        (intvec2        (self 'find-register-by-name "intvec2"))
        (inten2sel      (self 'find-register-by-name "inten2sel"))
        (intsrc         (self 'find-register-by-name "intsrc"))
        (intclr         (self 'find-register-by-name "intclr"))
        (intctl         (self 'find-register-by-name "intctl"))
        (rx             (self 'find-register-by-name "rx"))
        (xyrange        (self 'find-register-by-name "xyrange")) 
        (xybase         (self 'find-register-by-name "xybase"))
        (xyctl          (self 'find-register-by-name "xyctl"))
        (ru             (self 'find-register-by-name "ru"))
        (uvrange        (self 'find-register-by-name "uvrange"))
        (uvbase         (self 'find-register-by-name "uvbase"))
        (uvctl          (self 'find-register-by-name "uvctl"))
        (mdmactl        (self 'find-register-by-name "mdmactl"))
        (mdmacptr       (self 'find-register-by-name "mdmacptr"))
        (odmactl        (self 'find-register-by-name "odmactl"))
        (odmacptr       (self 'find-register-by-name "odmacptr"))
        (linpixctl      (self 'find-register-by-name "linpixctl"))
        (clutbase       (self 'find-register-by-name "clutbase"))
        (svshift        (self 'find-register-by-name "svshift"))
        (acshift        (self 'find-register-by-name "acshift"))
        (comminfo       (self 'find-register-by-name "comminfo"))
        (commctl        (self 'find-register-by-name "commctl"))
        (dabreak        (self 'find-register-by-name "dabreak"))
        (icachectl      (self 'find-register-by-name "icachectl"))
        (dcachectl      (self 'find-register-by-name "dcachectl")))
    (the-environment)))

(set-macro-character #\~
  (lambda (f c)
    (let ((pname (read-merlin-symbol f)))
      `(sym ,pname))))

(define (sym pname)
  (and pname (*mpe* 'find-symbol-or-register pname)))

(define-method (c-mpe 'runtime-eval expr)
  (fluid-let ((*mpe* self)
              (&p self)
              (*default-mpe* self)          ; for backward compatiblity
              (*default-mpe-debugger* self) ; for backward compatiblity
              (&d self))                    ; for backward compatiblity
    (self 'eval-with-register-bindings expr)))

(define-method (c-mpe 'eval-with-register-bindings expr)
  (eval expr i-register-environment))

(define-method (c-mpe 'compile-with-register-bindings expr)
  (compile expr i-register-environment))

(define-method (c-mpe 'find-register-by-name name)
  (or (table-ref i-register-table name)
      (let ((r (c-register 'new self name)))
        (if r
          (begin
            (table-set! i-register-table name r)
            (table-set! i-register-address-table (r 'address) r)
            r)
          #f))))

(define-method (c-mpe 'find-register-by-address addr)
  (table-ref i-register-address-table addr))

(define-method (c-mpe 'display &optional (s *standard-output*))

  ; start on a fresh line
  (fresh-line)
  
  ; display the general registers
  (format s "v0:")
  (write-char #\space s) (self 'display-register "r0"  :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r1"  :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r2"  :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r3"  :field-width 4 :stream s)
  (format s "~%v1:")
  (write-char #\space s) (self 'display-register "r4"  :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r5"  :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r6"  :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r7"  :field-width 4 :stream s)
  (format s "~%v2:")
  (write-char #\space s) (self 'display-register "r8"  :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r9"  :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r10" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r11" :field-width 4 :stream s)
  (format s "~%v3:")
  (write-char #\space s) (self 'display-register "r12" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r13" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r14" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r15" :field-width 4 :stream s)
  (format s "~%v4:")
  (write-char #\space s) (self 'display-register "r16" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r17" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r18" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r19" :field-width 4 :stream s)
  (format s "~%v5:")
  (write-char #\space s) (self 'display-register "r20" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r21" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r22" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r23" :field-width 4 :stream s)
  (format s "~%v6:")
  (write-char #\space s) (self 'display-register "r24" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r25" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r26" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r27" :field-width 4 :stream s)
  (format s "~%v7:")
  (write-char #\space s) (self 'display-register "r28" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r29" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r30" :field-width 4 :stream s)
  (write-char #\space s) (self 'display-register "r31" :field-width 4 :stream s)
  
  ; display the bilinear registers
  (format s "~%~%")      (self 'display-register "rx" :stream s)
  (write-char #\space s) (self 'display-register "ry" :stream s)
  (write-char #\space s) (self 'display-register "xyrange" :stream s)
  (write-char #\space s) (self 'display-register "xybase" :stream s)
  (write-char #\space s) (self 'display-register "xyctl" :stream s)
  (newline s)            (self 'display-register "ru" :stream s)
  (write-char #\space s) (self 'display-register "rv" :stream s)
  (write-char #\space s) (self 'display-register "uvrange" :stream s)
  (write-char #\space s) (self 'display-register "uvbase" :stream s)
  (write-char #\space s) (self 'display-register "uvctl" :stream s)

  ; display the instruction pipeline registers
  (format s "~%~%")      (self 'display-register "pcexec" :stream s)
  (write-char #\space s) (self 'display-register "pcroute" :stream s)
  (write-char #\space s) (self 'display-register "pcfetch" :stream s)

  ; display the special registers
  (newline s)            (self 'display-register "mpectl" :stream s)
  (write-char #\space s) (self 'display-register "rz" :stream s)
  (write-char #\space s) (self 'display-register "sp" :stream s)
  (write-char #\space s) (self 'display-register "rc0" :stream s)
  (write-char #\space s) (self 'display-register "rc1" :stream s)

  ; display the interrupt registers
  (format s "~%~%")      (self 'display-register "intsrc" :stream s)
  (write-char #\space s) (self 'display-register "intclr" :stream s)
  (write-char #\space s) (self 'display-register "intctl" :stream s)
  (newline s)            (self 'display-register "intvec1" :stream s)
  (write-char #\space s) (self 'display-register "inten1" :stream s)
  (write-char #\space s) (self 'display-register "rzi1" :stream s)
  (newline s)            (self 'display-register "intvec2" :stream s)
  (write-char #\space s) (self 'display-register "inten2sel" :stream s)
  (write-char #\space s) (self 'display-register "rzi2" :stream s)

  ; display the exception registers
  (format s "~%~%")      (self 'display-register "excephalten" :stream s)
  (write-char #\space s) (self 'display-register "excepsrc" :stream s)
  (write-char #\space s) (self 'display-register "excepclr" :stream s)

  ; display the dma registers
  (format s "~%~%")      (self 'display-register "mdmactl" :stream s)
  (write-char #\space s) (self 'display-register "mdmacptr" :stream s)
  (newline s)            (self 'display-register "odmactl" :stream s)
  (write-char #\space s) (self 'display-register "odmacptr" :stream s)

  ; display the shift count registers and the accumulator
  (format s "~%~%")      (self 'display-register "svshift" :stream s)
  (write-char #\space s) (self 'display-register "linpixctl" :stream s)
  (write-char #\space s) (self 'display-register "acshift" :stream s)

  ; display some other registers
  (format s "~%~%")      (self 'display-register "dabreak" :stream s)
  (write-char #\space s) (self 'display-register "clutbase" :stream s)

  ; display the comm bus registers
  (format s "~%~%")      (self 'display-register "comminfo" :stream s)
  (write-char #\space s) (self 'display-register "commctl" :stream s)
  
  ; display the alu flags
  (let ((cc-value (self 'register-value "cc")))
    (format s "~%~%cc: c: ~S z: ~S n: ~S v: ~S mv: ~S c0z: ~S c1z: ~S modge: ~S modmi: ~S cf0: ~S cf1: ~S"
            (if (zero? (logand cc-value cc-c)) 0 1)
            (if (zero? (logand cc-value cc-z)) 0 1)
            (if (zero? (logand cc-value cc-n)) 0 1)
            (if (zero? (logand cc-value cc-v)) 0 1)
            (if (zero? (logand cc-value cc-mv)) 0 1)
            (if (zero? (logand cc-value cc-c0z)) 0 1)
            (if (zero? (logand cc-value cc-c1z)) 0 1)
            (if (zero? (logand cc-value cc-modge)) 0 1)
            (if (zero? (logand cc-value cc-modmi)) 0 1)
            (if (zero? (logand cc-value cc-cf0)) 0 1)
            (if (zero? (logand cc-value cc-cf1)) 0 1)))
  (values))

(define-method (c-mpe 'register-value name)
  (let ((addr (self 'register-address name)))
    (and addr (self 'fetch-scalar addr))))

(define-method (c-mpe 'set-register-value! name value)
  (let ((addr (self 'register-address name)))
    (and addr (self 'store-scalar! addr value))))

(define-method (c-mpe 'display-register name &key (field-width (1+ (string-length name))) (stream *standard-output*))
  (format stream "~A:" name)
  (let ((spaces (- field-width (string-length name))))
    (when (> spaces 0)
      (dotimes (i spaces)
        (write-char #\Space stream))))
  (fluid-let ((*hexnum-format* "%08lx"))
    (format stream "~X" (self 'register-value name)))
  (values))
